import React, { useState } from 'react';
import { useHistory } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import authService from '../services/authService';
import './Profile.css';

export default function Profile() {
  const history = useHistory();
  const { user } = useAuth();
  
  // State cho ƒë·ªïi m·∫≠t kh·∫©u
  const [showChangePassword, setShowChangePassword] = useState(false);
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [passwordMessage, setPasswordMessage] = useState('');
  
  // State cho hi·ªán/·∫©n m·∫≠t kh·∫©u
  const [showPasswords, setShowPasswords] = useState({
    current: false,
    new: false,
    confirm: false
  });

  // L·∫•y th√¥ng tin user t·ª´ localStorage n·∫øu ch∆∞a c√≥ trong context
  const getUserData = () => {
    if (user) return user;
    
    // Fallback: l·∫•y t·ª´ localStorage
    const userData = localStorage.getItem('user');
    if (userData) return JSON.parse(userData);
    
    const oauth2Data = localStorage.getItem('oauth2User');
    if (oauth2Data) return JSON.parse(oauth2Data);
    
    return null;
  };

  const userData = getUserData();
  const pictureUrl = userData?.picture || userData?.pictureUrl;
  
  // T·∫°o avatar t·ª´ t√™n ho·∫∑c email
  const getAvatarInitials = () => {
    if (userData?.fullName) {
      return userData.fullName.split(' ').map(name => name[0]).join('').toUpperCase().slice(0, 2);
    }
    if (userData?.email) {
      return userData.email[0].toUpperCase();
    }
    return 'U';
  };

  // Render avatar - ·∫£nh ho·∫∑c initials
  const renderAvatar = () => {
    if (pictureUrl) {
      return (
        <img 
          src={pictureUrl} 
          alt={userData.fullName || userData.username || 'User'}
          className="profile-avatar-img"
        />
      );
    } else {
      return getAvatarInitials();
    }
  };

  const handleBack = () => {
    history.goBack();
  };

  // X·ª≠ l√Ω ƒë·ªïi m·∫≠t kh·∫©u
  const handlePasswordChange = (e) => {
    const { name, value } = e.target;
    setPasswordData(prev => ({
      ...prev,
      [name]: value
    }));
    setPasswordMessage(''); // Clear message khi user typing
  };

  const handleSubmitPasswordChange = async (e) => {
    e.preventDefault();
    
    if (passwordData.newPassword !== passwordData.confirmPassword) {
      setPasswordMessage('M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp');
      return;
    }
    
    if (passwordData.newPassword.length < 6) {
      setPasswordMessage('M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±');
      return;
    }

    // Ki·ªÉm tra user c√≥ ƒëƒÉng nh·∫≠p qua traditional login kh√¥ng
    const userData = getUserData();
    if (userData.authType === 'cognito-oauth2-server') {
      setPasswordMessage('T√†i kho·∫£n OAuth2 kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u t·∫°i ƒë√¢y');
      return;
    }

    // Ki·ªÉm tra token h·ª£p l·ªá tr∆∞·ªõc khi ƒë·ªïi m·∫≠t kh·∫©u
    setPasswordMessage('ƒêang ki·ªÉm tra token...');
    const tokenValidation = await authService.validateToken();
    
    if (!tokenValidation.valid) {
      setPasswordMessage('Token kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
      return;
    }

    setPasswordMessage('ƒêang ƒë·ªïi m·∫≠t kh·∫©u...');
    try {
      const response = await authService.changePassword(
        passwordData.currentPassword,
        passwordData.newPassword,
        passwordData.confirmPassword
      );
      
      if (response.success) {
        setPasswordMessage('ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!');
        setPasswordData({
          currentPassword: '',
          newPassword: '',
          confirmPassword: ''
        });
        setShowChangePassword(false);
      } else {
        setPasswordMessage(response.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i');
      }
    } catch (error) {
      setPasswordMessage(error.message || 'ƒê·ªïi m·∫≠t kh·∫©u th·∫•t b·∫°i');
    }
  };

  const toggleChangePassword = () => {
    setShowChangePassword(!showChangePassword);
    setPasswordMessage('');
    setPasswordData({
      currentPassword: '',
      newPassword: '',
      confirmPassword: ''
    });
    // Reset show passwords state
    setShowPasswords({
      current: false,
      new: false,
      confirm: false
    });
  };

  const togglePasswordVisibility = (field) => {
    setShowPasswords(prev => ({
      ...prev,
      [field]: !prev[field]
    }));
  };


  if (!userData) {
    return (
      <div className="profile-main-container">
        <div className="profile-error">
          <h2>Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng</h2>
          <button onClick={handleBack} className="profile-back-btn">
            Quay l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="profile-main-container">
      <button className="profile-back-btn" onClick={handleBack} aria-label="Back">
        <svg width="40" height="40" viewBox="0 0 40 40">
          <path d="M30 20H10M10 20L18 12M10 20L18 28" stroke="#000" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round"/>
        </svg>
      </button>
      
      <div className="profile-flex">
        <div className="profile-avatar-section">
          <div className="profile-avatar-large">
            {renderAvatar()}
          </div>
          <h2 className="profile-name">{userData.fullName || userData.username || 'User'}</h2>
        </div>
        
        <div className="profile-fields">
          <div className="profile-field-row">
            <label className="profile-label">H·ªç v√† t√™n:</label>
            <input 
              className="profile-input" 
              type="text" 
              value={userData.fullName || ''} 
              readOnly 
            />
          </div>
          
          <div className="profile-field-row">
            <label className="profile-label">T√™n ƒëƒÉng nh·∫≠p:</label>
            <input 
              className="profile-input" 
              type="text" 
              value={userData.username || ''} 
              readOnly 
            />
          </div>
          
          <div className="profile-field-row">
            <label className="profile-label">Email:</label>
            <input 
              className="profile-input" 
              type="text" 
              value={userData.email || ''} 
              readOnly 
            />
          </div>

          {/* Ch·ªâ hi·ªÉn th·ªã n√∫t ƒë·ªïi m·∫≠t kh·∫©u cho t√†i kho·∫£n ƒëƒÉng k√Ω t·∫°i web */}
          {userData.authType !== 'cognito-oauth2-server' && (
            <div className="profile-field-row">
              <button 
                className="change-password-btn"
                onClick={toggleChangePassword}
              >
                {showChangePassword ? 'H·ªßy ƒë·ªïi m·∫≠t kh·∫©u' : 'ƒê·ªïi m·∫≠t kh·∫©u'}
              </button>
            </div>
          )}

          {/* Form ƒë·ªïi m·∫≠t kh·∫©u */}
          {showChangePassword && (
            <div className="change-password-section">
              <h3 className="change-password-title">ƒê·ªïi m·∫≠t kh·∫©u</h3>
              
              <form onSubmit={handleSubmitPasswordChange} className="change-password-form">
                <div className="profile-field-row">
                  <label className="profile-label">M·∫≠t kh·∫©u hi·ªán t·∫°i:</label>
                  <div className="password-input-container">
                    <input 
                      className="profile-input" 
                      type={showPasswords.current ? "text" : "password"}
                      name="currentPassword"
                      value={passwordData.currentPassword}
                      onChange={handlePasswordChange}
                      required
                    />
                    <button 
                      type="button"
                      className="password-toggle-btn"
                      onClick={() => togglePasswordVisibility('current')}
                      aria-label={showPasswords.current ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"}
                    >
                      {showPasswords.current ? 'üôà' : 'üëÅÔ∏è'}
                    </button>
                  </div>
                </div>
                
                <div className="profile-field-row">
                  <label className="profile-label">M·∫≠t kh·∫©u m·ªõi:</label>
                  <div className="password-input-container">
                    <input 
                      className="profile-input" 
                      type={showPasswords.new ? "text" : "password"}
                      name="newPassword"
                      value={passwordData.newPassword}
                      onChange={handlePasswordChange}
                      required
                      minLength={6}
                    />
                    <button 
                      type="button"
                      className="password-toggle-btn"
                      onClick={() => togglePasswordVisibility('new')}
                      aria-label={showPasswords.new ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"}
                    >
                      {showPasswords.new ? 'üôà' : 'üëÅÔ∏è'}
                    </button>
                  </div>
                </div>
                
                <div className="profile-field-row">
                  <label className="profile-label">X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi:</label>
                  <div className="password-input-container">
                    <input 
                      className="profile-input" 
                      type={showPasswords.confirm ? "text" : "password"}
                      name="confirmPassword"
                      value={passwordData.confirmPassword}
                      onChange={handlePasswordChange}
                      required
                      minLength={6}
                    />
                    <button 
                      type="button"
                      className="password-toggle-btn"
                      onClick={() => togglePasswordVisibility('confirm')}
                      aria-label={showPasswords.confirm ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"}
                    >
                      {showPasswords.confirm ? 'üôà' : 'üëÅÔ∏è'}
                    </button>
                  </div>
                </div>
                
                {passwordMessage && (
                  <div className={`password-message ${passwordMessage.includes('th√†nh c√¥ng') ? 'success' : 'error'}`}>
                    {passwordMessage}
                  </div>
                )}
                
                <div className="profile-field-row">
                  <button type="submit" className="submit-password-btn">
                    ƒê·ªïi m·∫≠t kh·∫©u
                  </button>
                </div>
              </form>
            </div>
          )}
          
        </div>
      </div>
    </div>
  );
}
